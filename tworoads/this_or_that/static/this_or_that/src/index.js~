
// React ref: https://facebook.github.io/react/docs/tutorial.html
// This highcharts design taken from http://yaymedia.net/?p=1571 
var HighchartsBar = React.createClass({displayName: 'HighchartsBar',
  renderChart: function() {
        var node = this.refs.chartNode.getDOMNode();
        var dataSeries = this.props.model;
        var daterange = this.props.daterange;
        jQuery(function ($) {
        $(node).highcharts({
        chart: {
            zoomType: 'x'
        },
        title: {
            text: 'Daily Log Returns',
            x: -20 //center
        },
        subtitle: {
 			text: document.ontouchstart === undefined ?
                    'Click and drag in the plot area to zoom in' :
                    'Pinch the chart to zoom in',
            x: -20
        },
        xAxis: daterange,
        yAxis: {
            title: {
                text: 'Daily log returns'
            },
            plotLines: [{
                value: 0,
                width: 1,
                color: '#808080'
            }]
        },
        tooltip: {},
        legend: {
            layout: 'vertical',
            align: 'right',
            verticalAlign: 'middle',
            borderWidth: 0
        },
        series: dataSeries
        });
    });
 
  },
  componentWillReceiveProps: function(nextProps) {
    // we can use this method to see if the component is receiving props
  },
  shouldComponentUpdate: function(nextProps, nextState) {
    return nextProps.model.length > 0; // should we update the component?
  },
  componentDidMount: function() {
		//    this.renderChart();
		// this method will be invoked when the component is mounted
  },
  componentDidUpdate: function() {
    this.renderChart(); // after the component props are updated, render the chart into the DOM node
  },
  render: function() {
    return (
      React.DOM.div({className: "chart", ref: "chartNode"})
    );
  }
});



var StrategyOption = React.createClass({
	
	getInitialState: function() {
        return {
        	log_returns: '',
            netReturn: '',
            annualizedReturn: '',
            maxDrawdown: ''
        };
    },
    
    componentWillReceiveProps: function(nextProps) {
        $.ajax({
			url: nextProps.ID + "/get_strategy_data/?format=json",
			dataType: 'json',
			cache: false,
			success: function(data) {
				this.setState({
				    log_returns: data.log_returns,
				    netReturn: data.netReturn,
				    annualizedReturn: data.annualizedReturn,
				    maxDrawdown: data.maxDrawdown
				});
			}.bind(this),
			error: function(xhr, status, err) {
				console.error(err.toString());
			}.bind(this)
		});
    },
    
	render: function() {
		datalist = [];
		categoriesList = [];
		for(i = 0; i<this.state.log_returns.length;i++)
		{
			categoriesList.push(new Date(parseInt(this.state.log_returns[i].date.substring(0,4)),
									  parseInt(this.state.log_returns[i].date.substring(5,7))-1,
									  parseInt(this.state.log_returns[i].date.substring(8))));
			datalist.push(parseFloat(this.state.log_returns[i].value));
		}
		model = [];
		var singleObj = {};
		singleObj['name'] = this.props.ID;
		singleObj['data'] = datalist;
		model.push(singleObj);
		
		var daterange = {};
		daterange['type'] = 'datetime';
		var labelObj = {};
		labelObj['format'] = '{value: %a %b %e %Y}';
		daterange['labels'] = labelObj;
		daterange['categories'] = categoriesList;
		
		thisNR = "Net Return: ".concat(this.state.netReturn).concat("%")
		thisAR = "Annualized Return: ".concat(this.state.annualizedReturn).concat("%")
		thisMD = "Maximum Drawdown: ".concat(this.state.maxDrawdown).concat("%")
		return (
			<div>
				<h2>Strategy ID: {this.props.ID}</h2>
				<HighchartsBar model={model} daterange={daterange}/>
				<div id="more-info-container">
					<div id="button">
						<span>
							<label id="more-info-icon" htmlFor="name">
								<i className="fa fa-plus-circle">  More Info</i>
							</label>
						</span>
						<a className="first-hover">
							{thisNR}
						</a>
						<a className="sec-hover">
							{thisAR}
						</a>
						<a className="third-hover">
							{thisMD}
						</a>
					</div>
				</div>
			</div>
		);
	}
});



    
var AppBody = React.createClass({
	
	getInitialState: function() {
        new_state = {
            firstID: '',
            secondID: ''
        };
        this.loadInitialState();
        return new_state;
    },
    
    loadInitialState: function() {
        $.ajax({
			url: this.props.username + "/get_user_strategies/?format=json",
			dataType: 'json',
			cache: false,
			success: function(data) {
				if(data.firstID == data.secondID) {
					alert("Based on your choices the best strategy for you is\nStrategy number " + data.secondID );
				}
				var state = this.state;
				state.firstID = data.firstID;
				state.secondID = data.secondID;
		    	this.setState(state);
			}.bind(this),
			error: function(xhr, status, err) {
				console.error(err.toString());
			}.bind(this)
		});
    },
	
	handleRadioSubmit: function(e) {
		e.preventDefault();
		var firstRadioButton = React.findDOMNode(this.refs.firstRadioButton);
		var secondRadioButton = React.findDOMNode(this.refs.secondRadioButton);
		var clickedID = '';
		if (firstRadioButton.checked) {
			clickedID = firstRadioButton.value;
		}
		else if (secondRadioButton.checked) {
			clickedID = secondRadioButton.value;
		}
		else {
			alert("Please pick a strategy before submit !");
			return;
		}
		
		$.ajax({
			url: this.props.username + "/" + clickedID + "/get_next_strategies/?format=json",
			dataType: 'json',
			cache: false,
			success: function(data) {
				this.setState({
					firstID: data.firstID,
					secondID: data.secondID
				});
			}.bind(this),
			error: function(xhr, status, err) {
				console.error(err.toString());
			}.bind(this)
		});
				
		return;
	},
	
	render: function() {
		return (
			<div>
				<div>
					<StrategyOption ID = {this.state.firstID} />
				</div>
				<hr/>
				<div>
					<StrategyOption ID = {this.state.secondID} />
				</div>
				<hr/>
				<div >
					<h3> Pick a strategy:</h3>
					<form onSubmit={this.handleRadioSubmit}>
						<div className="register-switch" >
							<input type="radio" className="register-switch-input" name="choice" ref="firstRadioButton" id="firstRadioButton" value={this.state.firstID} />
							<label htmlFor="firstRadioButton" className="register-switch-label">{this.state.firstID}</label>
							<input type="radio" className="register-switch-input" name="choice" ref="secondRadioButton" id="secondRadioButton" value={this.state.secondID} />
							<label htmlFor="secondRadioButton" className="register-switch-label">{this.state.secondID}</label>
						</div>
						<input className="register-button" type="submit" value="Submit!" />
					</form>
				</div>
			</div>
		);
	}
});



var LoginForm = React.createClass({
	
	handleLoginSubmit: function(e) {
		e.preventDefault();
		var username = React.findDOMNode(this.refs.loginusername).value.trim();
		if (!username) {
			return;
		}
		
		React.findDOMNode(this.refs.loginusername).value = '';
		
		$.ajax({
			url: username + "/check_login/?format=json",
			dataType: 'json',
			cache: false,
			success: function(data) {
				if(data.loginStatus==false) {
					alert("The username you entered is NOT registered. \n\nPlease try again or Sign up");
				}
				this.props.onUserLogin(data.loginStatus, data.username);
			}.bind(this),
			error: function(xhr, status, err) {
				console.error(err.toString());
			}.bind(this)
		});
				
		return;
	},

	render: function() {
		return (
			<form className="loginForm" onSubmit={this.handleLoginSubmit}>
				<h1>Log in</h1>
				<hr/>
				<label id="icon" htmlFor="name"><i className="icon-user"></i></label>
				<input type="text" placeholder="Username" ref="loginusername" required = "required" required pattern="[a-zA-Z0-9]+"/>
				<br/>
				<br/>
				<input type="submit" value="Log in" className = "submit"/>
			</form>
		);
	}
});




var SignupForm = React.createClass({
  
	handleSignupSubmit: function(e) {
		e.preventDefault();
		var username = React.findDOMNode(this.refs.signupusername).value.trim();
		var age = React.findDOMNode(this.refs.age).value.trim();
		var income = React.findDOMNode(this.refs.income).value.trim();
		var riskAppetite = React.findDOMNode(this.refs.riskAppetite).value.trim();
		var savings = React.findDOMNode(this.refs.savings).value.trim();
		if (!username || !age || !income || !riskAppetite || !savings) {
			return;
		}

		$.ajax({
			url: username + "/check_signup/?format=json",
			dataType: 'json',
			type: 'POST',
			data: {'age': age, 'income': income, 'riskAppetite': riskAppetite, 'savings': savings},
			cache: false,
			success: function(data) {
				if(data.loginStatus==false) {
					alert("The username you entered is NOT available. \n\nPlease sign up with a different username");
				}
				this.props.onUserLogin(data.loginStatus, data.username);
			}.bind(this),
			error: function(xhr, status, err) {
				console.error(err.toString());
			}.bind(this)
		});
				
		return;
	},

	render: function() {
		return (
			<form className="signupForm" onSubmit={this.handleSignupSubmit}>
				<h1>Sign up</h1>
				<hr/>
				<label id="icon"htmlFor="name"><i className="icon-user"></i></label>
				<input type="text" placeholder="Username" ref="signupusername" required = "required" required pattern="[a-zA-Z0-9]+"/>
				<br/>
				<label id="icon"htmlFor="name"><i className="fa fa-calendar"></i></label>
				<input type="number" placeholder="Age" min="18" max="150" ref="age" required = "required" />
				<br/>
				<label id="icon"htmlFor="name"><i className="fa fa-inr"></i></label>
				<input type="number" placeholder="Annual Income(in LPA)" step="0.50" min="0" max="10000" ref="income" required = "required"/>
				<br/>
				<label id="icon"htmlFor="name"><i className="icon-flag"></i></label>
				<input type="number"  placeholder="Risk Appetite(in %)" min="0" max ="100" step ="0.50" ref="riskAppetite" required = "required"/>
				<br/>
				<label id="icon"htmlFor="name"><i className="fa fa-money"></i></label>
				<input type="number"  placeholder="Savings(in %)"min="0" max ="100" step="0.50"ref="savings" required = "required"/>
				<br/>
				<br/>
				<input type="submit" value="Sign up" className = "submit"/>
			</form>
		);
	}
});




var LoginSignup = React.createClass({
	
	getInitialState: function() {
        return {
            loginStatus: false,
            username: ''
        };
    },
    
    handleUserLogin: function(loginStatus,username) {
        this.setState({
            loginStatus: loginStatus,
            username: username
        });
    },
    
	render: function() {
		if(this.state.loginStatus == true)
		{
			if((this.state.username).length > 10){
				var displayUsername = (this.state.username).substr(0,10)+'...';
			}
			else {
				displayUsername = this.state.username;
			}
			return (
				<div>
					<div className="top-bar">
						<label id="top-bar-icon" htmlFor="name"><i className="fa fa-refresh fa-2x"></i></label>
						<h1 className="top-bar-text">THIS-OR-THAT</h1>
						<h2 className="top-bar-user">Logged in: {displayUsername} </h2>
					</div>
					<AppBody username = {this.state.username} />
				</div>
			);
		}
		else
		{
			return (
				<div>
					<div className="top-bar">
						<label id="top-bar-icon" htmlFor="name"><i className="fa fa-refresh fa-2x"></i></label>
						<h1 className="top-bar-text">THIS-OR-THAT</h1>
					</div>
					<div className="testbox">
						<SignupForm onUserLogin = {this.handleUserLogin}/>
						<br/>
						<LoginForm onUserLogin = {this.handleUserLogin}/>
					</div>
				</div>
			);
		}
	}
});




React.render(
	<LoginSignup />,
	document.getElementById('content')
);

